Explain why it is more difficult to compare floating-point numbers than integers.
Write Java code to test whether an integer n equals 10 and whether a floating-point
number x is approximately equal to 10.

It is more difficult to compare floating-point numbers than integers because integers are stored as their exact value
because integer numbers can be represented exactly using the binary number system as long as there are enough digits,
or bits.
Floating-point numbers on the other hand cannot always be represented using the binary number system, i.e., multiples
of 2. For example, in the binary number system there is no exact representation of the fraction 1/10. And in the decimal
number system there is no representation of the fraction 1/3.
The fact that floating point numbers cannot be represented exactly as a binary number means that computers
represent floating-point numbers by approximating a slightly smaller or bigger number which is stored in memory as a .
binary number.
Additionally, floating-point arithmetic leads to rounding-errors because the precision of the floating point is limited.
Therefore, the result of an operation may need to be rounded to fit within the available bits. Rounding errors can
accumulate over multiple operations, making the final result less accurate.
Due to representation approximation and rounding errors which characterise floating-point numbers it follows that two
floating-point numbers that are mathematically equal might not be bitwise identical due to approximation and rounding
errors. For this reason, comparing floating-point numbers using the equality relational operator == is unreliable.
