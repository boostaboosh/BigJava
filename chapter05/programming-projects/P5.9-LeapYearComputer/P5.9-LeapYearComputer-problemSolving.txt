A year with 366 days is called a leap year. Leap years are necessary to keep the cal-
endar synchronized with the sun because the earth revolves around the sun once
every 365.25 days. Actually, that figure is not entirely precise, and for all dates after
1582 the Gregorian correction applies. Usually years that are divisible by 4 are leap
years, for example 1996. However, years that are divisible by 100 (for example, 1900)
are not leap years, but years that are divisible by 400 are leap years (for example,
2000).
Write a program that asks the user for a year and computes whether that year
is a leap year.
Provide a class Year with a method isLeapYear.
Use a single if statement and Boolean operators.

implement the Year class with a method isLeapYear
step 1 - find out methods that I need to supply
- a method which returns whether a year is a leap year or not

step 2 - write the public interface for my class. Specify types of values stored in parameter variables and return
        values. Using a sample object makes this easier:
Year twentyTwentyThree = new Year(2023);
boolean isLeapYear = twentyTwentyThree.isLeapYear();
Now I can deduce the public interface of the methods of my class with parameter and return types:
public boolean isLeapYear()

I must also provide users of my class with a constructor with which to make objects of my class. I need to think about
what information I need in order to construct an object of my class and how many constructors I should provide.
public Year(int yearNumber)

step 3 - document the public interface of my class by writing documentation comments before each method, class, and
      constructor declaration. Document the public interface of my class by describing my class and its methods and
      constructors purpose, and provide a brief explanation for method and constructor arguments and return values.

step 4 - determine the instance variables of my class
Ask myself "what information do objects of my class need in order to do everything they need to do (execute the
instructions in their method and constructor bodies?". Importantly, do not introduce unnecessary instance variables. As
a rule of thumb: if a value can be computed on demand it is best to do so.

step 5 - implement constructors and methods
isLeapYear method computation problem-solving:
    step 1 - understand the problem: what are the inputs and outputs?
    inputs
    1) a year number
    output
    1) if the year is a leap year or not

    step 2 - work out examples by hand
    1) in: 2000 out: is leap year
    2) in: 1996 out: is leap year
    3) in: 1997 out: not a leap year
    4) in: 800 out: not a leap year
    5) in: 1600 out: is leap year
    6) in: 1800 out: not a leap year

    step 3 - write a pseudocode algorithm for solving general instance of the problem using the method you used to solve
    specific instances of the problem by hand
    Use a single if statement and Boolean operators.

    for all dates after 1582 the Gregorian correction applies.
    Usually years that are divisible by 4 are leap years, for example 1996.
    However, years that are divisible by 100 (for example, 1900) are not leap years,
    but years that are divisible by 400 are leap years (for example, 2000).

    if year > 1582 and (year divided by 4 remainder is equal to 0 and year divided by 100 remainder is not 0 or year
    divided by 400 is equal to 0)
       then year is a leap year
    otherwise
       year is not a leap year

    step 4 - declare the variables and constants that I need, remember to specify their types
    int yearNumber
    final int LEAP_YEAR_DIVISOR = 4
    final int NOT_A_LEAP_YEAR_DIVISOR = 100
    final int ALWAYS_A_LEAP_YEAR_DIVISOR = 400

    step 5 - translate my pseudocode to java language

    step 6 - provide input and output

step 6 - test your class