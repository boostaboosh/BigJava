Implementing a class from a given specification

1 - Find out which methods you are asked to supply.
In a simulation you don't have to provide every feature that occurs in the
real world because there are too many.
The assignment tells you which aspects of the real world object you are
modelling you should simulate.
Make a list of them.

from exercise 3.4 description:
Provide methods // for circuit objects
    public int getFirstSwitchState() // 0 for down, 1 for up
    public int getSecondSwitchState()
    public int getLampState() // 0 for off, 1 for on
    public void toggleFirstSwitch()
    public void toggleSecondSwitch()

2 - Specify the public interface.
Turn the list from step 1 into a list of methods, with specific types for
parameter variables and return values. This step is simpler if you write out
method calls that are applied to a sample object.

Circuit hallwayCircuit = new hallwayCircuit();
hallwayCircuit.getFirstSwitchState();
hallwayCircuit.getSecondSwitchState();
hallwayCircuit.getLampState();
hallwayCircuit.toggleFirstSwitch();
hallwayCircuit.toggleSecondSwitch();

Now we have a specific list of methods:

for circuit objects:
    public int getFirstSwitchState(); // 0 for down, 1 for up
    public int getSecondSwitchState();
    public int getLampState // 0 for off, 1 for on
    public void toggleFirstSwitch();
    public void toggleSecondSwitch();

To complete the public interface, you need to specify the constructors.
Ask yourself what information you need in order to construct an object of your
class. Sometimes you will want two constructors: one that sets instance variables
to a default and one that sets instance variables to user defined values.

for circuit objects:
    public Circuit();

3 - Document the public interface.
Add documentation comments to the public interface of your classes.

4 - Determine instance variables
Ask yourself what information an object needs to do its job.
Go through each method and ask yourself what you need to carry out the method's task.
Make instance variables to store the information that the method needs.
Importantly, do not introduce unnecessary instance variables.
If a value can be computed on demand from other instance variables it is best to do so.

5 - Implement constructors and methods.
Implement the constructors and methods in your class one at a time starting with the
easiest one.
Remember that methods can be called more than once and in any order.

6 - Test your class.
Write a short tester program and execute it.
The tester program should carry the method calls that you found in step 2.