Show that the BankAccount(double initialBalance) constructor is not strictly necessary.
That is, if we removed that constructor from the public interface, how could a programmer still obtain BankAccount objects with an arbitrary balance?
Conversely, could we keep only the BankAccount(double initialBalance) constructor
and remove the BankAccount() constructor? 

1  /**
2  A bank account has a balance that can be changed by
3  deposits and withdrawals.
4  */
5  public class BankAccount
6  {
7  private double balance;
8
9  /**
10 Constructs a bank account with a zero balance.
11 */
12 public BankAccount()
13 {
14 balance = 0;
15 }
16
17 /**
18 Constructs a bank account with a given balance.
19 @param initialBalance the initial balance
20 */
21 public BankAccount(double initialBalance)
22 {
23 balance = initialBalance;
24 }
25 ...

The BankAccount object constructor which takes a value of type double called initialBalance as
an argument is not strictly necessary because users of the BankAccount class could simply
Initialise a BankAccount object with an initial balance of zero using the no-argument
constructor of the BankAccount class and then use the deposit method to set the balance of the
bank account balance to an arbitrary value.

Conversely, you could keep the BankAccount object constructor which takes a value of type double
called initialBalance as an argument and get rid of the no-argument constructor for the 
BankAccount class and still construct BankAccount objects with an initial balance of zero by
using the constructor that takes a value of type double as an argument and passing a value of
Zero.
