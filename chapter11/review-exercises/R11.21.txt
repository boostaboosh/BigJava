••• R11.21 
The following code tries to close the writer without using a try-with-resources
statement:

PrintWriter out = new PrintWriter(filename);
try
{
	Write output.
	out.close();
}
catch (IOException exception)
{
	out.close();
}

What is the disadvantage of this approach? (Hint: What happens when the PrintWriter 
constructor or the close method throws an exception?)

Compared to a try with resources statement like:

try (PrintWriter out = new PrintWriter(filename))
{
	Write output.
} // PrintWriter out auto-closed

the provided code takes longer to read and would repeat the out.close call in each catch statement, 
and as hinted would could cause issues if the PrintWriter constructor failed and close methods
threw a NullPointedException by trying to invoke close on a null value, i.e., try to use a null value
in a case where an object is required.

If the PrintWriter constructor throws an exception the method where the provided code is placed
would throw an exception and the remainder of the method would not execute. But if the resource
was not a PrintWriter and the out object reference variable referenced a null value, then the
calls to out.close() in the try and catch block bodies would lead to NullPointerExceptions:

Thrown when an application attempts to use null in a case where an object is required. 
These include:
Calling the instance method of a null object.
Accessing or modifying the field of a null object.
Taking the length of null as if it were an array.
Accessing or modifying the slots of null as if it were an array.
Throwing null as if it were a Throwable value.
Applications should throw instances of this class to indicate other illegal uses of the null object. 

This could be remedied by using null checks of the sort if !out==null out.close(), but this would make
the statement even more laborious to implement and harder to read.

Additionally, the PrintWriter close() method cannot generate exceptions, but other resources that 
need to be closed can. In those scenarios the call to .close() in the catch statement could generate
another exception on top of the one that is being handled which might lead the exception to propagate
up the call stack to the main method and unexpectedly end the program if not handled by the caller
method.

In comparison to a normal try/catch statement for use with closeable resources that implement
the auto-closable interface, the try-with-resources statement does not require invoking the
close() method directly on the resource, so no NullPointerExceptions will be generated by invoking
.close() on an unsuccessfully constructed null resource in the try or catch bodies.
And a try-with-resources statement does not require having to repeat close in each catch statement,
because it closes the resources of the statement for you automatically after the try loop executes 
or is interrupted by an exception, only if the resources were successfully created.

