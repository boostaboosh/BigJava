•• R11.17
What happens when an exception is thrown, a try-with-resources statement calls
close, and that call throws an exception of a different kind than the original one?
Which one is caught by a surrounding catch clause? Write a sample program to try
it out.

When an exception is thrown from within a try with resources statement and the
try with resources statement automatically calls close on a resource which causes
an exception of a different kind from the original exception that caused the try
statement to be interrupted what happens is that the exception that caused the
try with resources statement to be interrupted is the statement which is caught by
the surrounding catch clause, and not the secondary exception generated by the close
method.
The exception that is caught by a surrounding catch clause (or clauses) is the primary
exception generated from within the try with resources block which caused the try
block to stop executing.

I have come to the conclusion that the sample program this exercise asks for
cannot be completed for someone this far into the book.
Because the automatic close statement won't generate an exception
because the Scanner close method does not throw any exceptions.
Neither does the PrintWriter class close method which is the only
other class introduced thus far in the book which uses
the AutoClosable interface and can therefore be used with
the try-with-resources statement.
