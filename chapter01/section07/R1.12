review exercise 1.12 page 2 Big Java

The cafeteria offers a discount card for sale that entitles you, during a certain period,
to a free meal whenever you have bought a given number of meals at the regular
price. The exact details of the offer change from time to time. Describe an algorithm
that lets you determine whether a particular offer is a good buy. What other inputs
do you need?

Step 1) Determine the inputs and outputs
inputs:
- discountPeriod // I don't need this input
- freeMealValue
- regularMealCost
- numberOfMealsToQualifyForDiscount
- relativeValueOfGoodDeal // I need this input to be able to say whether a deal is good or not
outputs:
We want to know whether a particular offer is a good buy. That is the desired output.

Step 2) Break down the problem into smaller tasks
To determine whether an offer is a good buy we need to determine the value of the free meal we receive relative to the cost of the regular meals we have to buy to qualify for the free meal.
That is the value of the free meal relative to the cost of the regular meals.
If this number
The price we pay to qualify for a free meal is
	regularMealCost * numberOfMealsToQualifyForDiscount = costToQualifyForFreeMeal
The value of a free meal relative to the cost of the regular meals is
	relativeValueOfFreeMeal = freeMealValue / costToQualifyForFreeMeal
To know whether a deal is good or not we need to see if the relativeValueOfFreeMeal is enough for it to qualify is a good deal for out standards. We are missing the input relativeValueOfGoodDeal.
	If relativeValueOfGoodDeal <= relativeValueOfFreeMeal
		goodDeal = true

Step 3) Describe each subtask in pseudocode
Here is the algorithm for deciding if the caffeteria offer is a good deal or not:

costToQualifyForFreeMeal = regularMealCost * numberOfMealsToQualifyForDiscount
relativeValueOfFreeMeal = freeMealValue / costToQualifyForFreeMeal
if relativeValueOfGoodDeal <= relativeValueOfFreeMeal
	Report good caffeteria deal
else
	Report bad caffeteria deal
	
Step 4) Test your pseudocode by working the problem
deal: freeMealValue: 10, regularMealCost: 12, numberOfMealsToQualifyForDiscount: 8, relativeValueOfGoodDeal: 0.25

costToQualifyForFreeMeal = regularMealCost * numberOfMealsToQualifyForDiscount = 12 * 8 = 96
relativeValueOfFreeMeal = freeMealValue / costToQualifyForFreeMeal = 10 / 96 = 0.1
relativeValueOfFreeMeal is 0.1, which is less than 0.25, so the output of the algorithm is to report a bad caffeteria deal.
