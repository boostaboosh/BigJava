•• R13.13 Outline, but do not implement, 
a recursive solution for generating all subsets of the
set {1, 2, . . . , n}.

understanding the problem

inputs:
a sequence of positive numbers from 1 to n, 
e.g. 1, 2, 3, 4, 5 for n == 5
desired outputs:
all the possible arrangements of the numbers in the input set

recursive comutation problem solving

1. think of ways to simplify the inputs

a. I can remove the first number
b. I can remove the last number
c. I can cut the list in half

2. think of how to combine the removed input with the solution to
the simplified input to obtain the solution to the original input

a. if i have the solution for 2,3,4,5, i.e. a bunch of lists of
these numbers in different orders, 
such as 3,4,2,5; 2,4,5,3; 2,3,5,4; etc.
how do i combine these lists
with the removed number, 1, to get all the possible permutations
of 1,2,3,4,5? 
I guess I can put the removed number at each index of the new lists
which are 1 element long that the old lists to get all 
possible additional arrangements with the removed number? 
So for the arrangment 2,3,4,5 I would obtain:
1,2,3,4,5;
2,1,3,4,5;
2,3,1,4,5;
2,3,4,1,5;
2,3,4,5,1;
and for each arrangement I would repeat this process of creating
new arrangements with the removed element at each possible index.
Because the arrangements I'm adding the number 1 to are all in unique
order, the new arrangments will be unique too because the other 
elements will never be in the same order.

3. find solutions to the simpmlest inputs

If I keep removing the first element I end up with lists of 1 element.
The arrangements of a list of 1 element are just 1: the list with 1
element.
So, if the input is a list of 1 element, the output is the same list
of 1 element. And then the getPermutations method that called itself
with 1 element will create a list of length 2 and put the element 
it removed at index 0 and then index 1 to get all permutations of 
its input list of length 2. 
Awesome, that was easier than expected : )
