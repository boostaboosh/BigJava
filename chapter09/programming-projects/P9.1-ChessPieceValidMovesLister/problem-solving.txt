•• P9.1
Implement a class ChessPiece with method setPosition(String coordinates).
The coordinate string identifies the row and column in chess notation,
such as "d8" for the initial position of the black queen.
Also provide a method ArrayList<String> canMoveTo()
that enumerates the valid moves from the current position.
Provide subclasses Pawn, Knight, Bishop, Rook, Queen, and King.

problem-solving:

ChessPiece superclass methods:
setPosition(String coordinates)
ArrayList<String> canMoveTo()

How-to 9.1 - developing an inheritance hierarchy:

step 1) List the classes that are part of the hierarchy:
ChessPiece
Pawn
Knight
Bishop
Rook
Queen
King

The problem description yields 7 classes listed above.
We could implement each class separately but that would not be
a good idea because the classes would have to repeat common
functionality, such as setting their position.
We need a class that can be responsible for common functionality
of chess pieces, which the ChessPiece class provided is.
Because Pawns, knights, bishops, rooks, queens, and kings
are special cases of chess pieces.
Therefore, we will introduce a common superclass ChessPiece.

step 2) Organise the classes into an inheritance hierarchy
I will draw an inheritance diagram that shows super- and
subclasses. See image: chess-pieces-inheritance-hierarchy.
I had considered making an inheritance hierarchy with more than
2 levels, by making some pieces inherit from others. Because a king
can be thought of as a special version of a queen that can move 1
square at a time, but I opted not to because the opposite is also
true: a queen can be thought of as a special version of a king that
can move more than 1 square at a time. So I realised that there was
circular reasoning going on in order to define one class as a
subclass of another, and neither class described an object which
was a more specialised version than the other.
It didn't really make sense to use super and subclass
terminology either. For example, it doesn't make sense to say all
kings are queens, but not all queens are kings.
On the other hand, it does make sense to say all queens are chess
pieces, but not all chess pieces are queens.
Therefore, queens are a subset of chess pieces, however kings
are not a subset of queens.
As a rule of thumb, I should ensure that a subclass truly "is a"
specialised type of the superclass. For example, "a Queen is a
Chess Piece." is true. But "a Queen is a King." is false.

step 3) Determine the common responsibilities
In step 2 I identified a class at the base of the hierarchy.
That class (ChessPiece) needs to have sufficient responsibilities
to carry out the tasks at hand. To find out what those tasks are,
I will write pseudocode for processing the objects:
create a collection of chess pieces.
set the positions of the chess pieces.
for each ChessPiece in a collect of ChessPieces
    print the squares that ChessPiece can move to

From the pseudocode I obtain the following responsibilities that
every chess piece must carry out:
    set its position on a chess board
    get the squares that a chess piece can move to

step 4) Decide which methods are overridden in subclasses.
For each subclass and the common responsibilities, I need to decide
whether the behaviour can be inherited or whether it needs to be
overridden.
I need to declare any methods that are inherited or overridden at
the root of the hierarchy in the ChessPiece superclass.

In the public interface of the ChessPiece superclass that the
different types of chess pieces inherit from, I will place the
methods setPosition() and canMoveTo(). The chess pieces must
override the canMoveTo method because a generic chess piece cannot
move according to any movement pattern. So, I will make the
canMoveTo() method abstract so that subclasses are forced to
override it, and thereby make the ChessPiece class abstract too,
which means instances of it cannot be made, hence it being abstract.
The setPosition method can be inherited by subclasses because this
behaviour can be inherited seeing as it is not different for the
different chess pieces.

step 5) Declare the public interface of each subclass.
Typically, subclasses have responsibilities other than those of
the superclass. I must list those, as well as the methods that
need to be overridden. I also need to specify how objects of the
subclasses should be constructed.

The subclasses of the chess piece superclass just need to override
the canMoveTo() method.

step 6) Identify instance variables
I need to list the instance variables for each class.
If I find an instance variable that is common to all classes,
I should place it at the base of the hierarchy (in the superclass).

step 7) Implement constructors and methods
I don't need constructors other than the one inherited from the ChessPiece
superclass because I don't think I need to initialise additional variables
in each subclass.
The one method I need to implement for each subclass is the canMoveTo method.
this will involve computational problem-solving for each piece's movement pattern.
I will need to use an enum to keep track of a pawn's state (moved/never_moved).
I'm going to make computational problem-solving files for each piece's
canMoveTo() method.
